generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum ProductType {
  LAPTOP
  PRINTER
  MONITOR
  ALL_IN_ONE
  DESKTOP
  CUSTOM_PC
  ACCESSORY
  MOTHERBOARD
  PROCESSOR
  RAM
  SSD
  HDD
  CABINET
  FAN
  GPU
  SCREEN
  KEYBOARD
  MOUSE
  PSU
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model Voucher {
  id          String       @id @default(uuid())
  code        String       @unique
  type        DiscountType
  value       Decimal      @db.Decimal(10, 2)
  maxUses     Int?
  usedCount   Int          @default(0)
  minAmount   Decimal?     @db.Decimal(10, 2)
  maxDiscount Decimal?     @db.Decimal(10, 2)
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  orders Order[]
  users  UserVoucher[]
  Cart   Cart[]

  @@map("vouchers")
}

model UserVoucher {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  voucher   Voucher  @relation(fields: [voucherId], references: [id])
  voucherId String
  usedAt    DateTime @default(now())

  @@unique([userId, voucherId])
  @@map("user_vouchers")
}

model Coupon {
  id                 String   @id @default(cuid())
  title              String   @map("coupon_title")
  discountPercentage Int      @map("discount_percentage")
  termsAndConditions String[] @map("coupon_tnc")
  code               String   @unique @map("coupon_code")
  isUsed             Boolean  @default(false) @map("coupons_used")
  validFrom          DateTime @map("valid_from")
  validTo            DateTime @map("valid_to")
  image              String?
  price              Decimal  @db.Decimal(10, 2)
  maxUsageAmount     Int      @map("max_usage_amount")
  minPurchaseAmount  Int      @map("min_purchase_amount")
  isActive           Boolean  @default(true) @map("is_active")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  maxUses            Int
  usedCount          Int      @default(0)
  minAmount          Int

  categoryId String?
  brandId    String?

  brand    Brand?    @relation(fields: [brandId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])

  orders Order[]
  users  UserCoupon[]
  Cart   Cart[]

  @@map("coupons")
}

model UserCoupon {
  id        String   @id @default(uuid())
  couponId  String
  coupon    Coupon   @relation(fields: [couponId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  usedAt    DateTime @default(now())

  @@unique([userId, couponId])
  @@map("user_coupons")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  stock       Int         @default(0)
  type        ProductType
  categoryId  String?
  brandId     String?
  specs       Json?
  featured    Boolean     @default(false)
  isPublished Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  images      String[]

  category Category? @relation(fields: [categoryId], references: [id])
  brand    Brand?    @relation(fields: [brandId], references: [id])

  orderItems            OrderItem[]
  reviews               Review[]
  compatibleWith        AccessoryCompatibility[] @relation("AccessoryCompatibility")
  compatibleAccessories AccessoryCompatibility[] @relation("ProductAccessories")
  wishlistedBy          WishlistItem[]
  Cart                  Cart[]
  CartItem              CartItem[]

  @@map("products")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?  @db.Text
  slug        String   @unique
  parentId    String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  products Product[]
  Coupon   Coupon[]

  @@map("categories")
}

model Brand {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
  Coupon   Coupon[]

  @@map("brands")
}

model AccessoryCompatibility {
  id          String   @id @default(uuid())
  accessoryId String
  productId   String
  createdAt   DateTime @default(now())

  accessory Product @relation("AccessoryCompatibility", fields: [accessoryId], references: [id])
  product   Product @relation("ProductAccessories", fields: [productId], references: [id])

  @@map("accessory_compatibility")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String?
  firstName String   @map("first_name")
  lastName  String?  @map("last_name")
  gender    Gender?
  phone     String?
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   Address?

  orders   Order[]
  reviews  Review[]
  wishlist WishlistItem[]
  vouchers UserVoucher[]
  coupons  UserCoupon[]
  Support  Support[]
  Cart     Cart[]

  @@map("users")
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Cart {
  id          String     @id @default(uuid())
  userId      String     @unique
  productId   String?
  couponId    String?
  totalAmount Decimal    @default(0) @db.Decimal(10, 2)
  subtotal    Decimal    @default(0) @db.Decimal(10, 2)
  discount    Decimal    @default(0) @db.Decimal(10, 2)
  voucherId   String?
  items       CartItem[]
  createdAt   DateTime   @default(now())
  addressId   String?    @map("address_id")

  user    User     @relation(fields: [userId], references: [id])
  product Product? @relation(fields: [productId], references: [id])
  coupon  Coupon?  @relation(fields: [couponId], references: [id])
  voucher Voucher? @relation(fields: [voucherId], references: [id])
  address Address? @relation(fields: [addressId], references: [id])

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id          String      @id @default(uuid())
  orderNumber String      @unique
  userId      String
  status      OrderStatus @default(PENDING)
  totalAmount Decimal     @db.Decimal(10, 2)
  subtotal    Decimal     @db.Decimal(10, 2)
  discount    Decimal     @default(0) @db.Decimal(10, 2)
  voucherId   String?
  couponId    String?
  addressId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  address Address  @relation(fields: [addressId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
  voucher Voucher? @relation(fields: [voucherId], references: [id])
  coupon  Coupon?  @relation(fields: [couponId], references: [id])

  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  @@map("order_items")
}

model Address {
  id         String   @id @default(uuid())
  userId     String   @unique
  fullName   String
  phone      String?
  address    String
  city       String
  state      String
  country    String
  postalCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orders Order[]

  user User   @relation(fields: [userId], references: [id])
  Cart Cart[]

  @@map("addresses")
}

model Review {
  id         String   @id @default(uuid())
  rating     Int      @db.SmallInt
  title      String?
  comment    String?  @db.Text
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, productId])
  @@map("reviews")
}

model Newsletter {
  id        String   @id @default(uuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("newsletters")
}

model Support {
  id              String   @id @default(uuid())
  userId          String
  contact         String
  billingName     String
  billingDate     DateTime
  productSerialNo String
  productModelNo  String
  issueType       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("supports")
}

model Otp {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otp")
}
